// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.edu.ufpb.nhrf.musicstreamer.service.impl;

import br.edu.ufpb.nhrf.musicstreamer.domain.Artist;
import br.edu.ufpb.nhrf.musicstreamer.domain.Track;
import br.edu.ufpb.nhrf.musicstreamer.repository.ArtistRepository;
import br.edu.ufpb.nhrf.musicstreamer.service.api.TrackService;
import br.edu.ufpb.nhrf.musicstreamer.service.impl.ArtistServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ArtistServiceImpl_Roo_Service_Impl {
    
    declare @type: ArtistServiceImpl: @Service;
    
    declare @type: ArtistServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ArtistRepository ArtistServiceImpl.artistRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private TrackService ArtistServiceImpl.trackService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param artistRepository
     * @param trackService
     */
    @Autowired
    public ArtistServiceImpl.new(ArtistRepository artistRepository, @Lazy TrackService trackService) {
        setArtistRepository(artistRepository);
        setTrackService(trackService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ArtistRepository
     */
    public ArtistRepository ArtistServiceImpl.getArtistRepository() {
        return artistRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param artistRepository
     */
    public void ArtistServiceImpl.setArtistRepository(ArtistRepository artistRepository) {
        this.artistRepository = artistRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return TrackService
     */
    public TrackService ArtistServiceImpl.getTrackService() {
        return trackService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param trackService
     */
    public void ArtistServiceImpl.setTrackService(TrackService trackService) {
        this.trackService = trackService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param artist
     * @return Map
     */
    public Map<String, List<MessageI18n>> ArtistServiceImpl.validate(Artist artist) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param artist
     * @param tracksToAdd
     * @return Artist
     */
    @Transactional
    public Artist ArtistServiceImpl.addToTracks(Artist artist, Iterable<Long> tracksToAdd) {
        List<Track> tracks = getTrackService().findAll(tracksToAdd);
        artist.addToTracks(tracks);
        return getArtistRepository().save(artist);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param artist
     * @param tracksToRemove
     * @return Artist
     */
    @Transactional
    public Artist ArtistServiceImpl.removeFromTracks(Artist artist, Iterable<Long> tracksToRemove) {
        List<Track> tracks = getTrackService().findAll(tracksToRemove);
        artist.removeFromTracks(tracks);
        return getArtistRepository().save(artist);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param artist
     * @param tracks
     * @return Artist
     */
    @Transactional
    public Artist ArtistServiceImpl.setTracks(Artist artist, Iterable<Long> tracks) {
        List<Track> items = getTrackService().findAll(tracks);
        List<Track> currents = artist.getTracks();
        Set<Track> toRemove = new HashSet<Track>();
        for (Iterator<Track> iterator = currents.iterator(); iterator.hasNext();) {
            Track nextTrack = iterator.next();
            if (items.contains(nextTrack)) {
                items.remove(nextTrack);
            } else {
                toRemove.add(nextTrack);
            }
        }
        artist.removeFromTracks(toRemove);
        artist.addToTracks(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        artist.setVersion(artist.getVersion() + 1);
        return getArtistRepository().save(artist);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param artist
     */
    @Transactional
    public void ArtistServiceImpl.delete(Artist artist) {
        // Clear bidirectional one-to-many parent relationship with Track
        for (Track item : artist.getTracks()) {
            item.setArtist(null);
        }
        
        getArtistRepository().delete(artist);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Artist> ArtistServiceImpl.save(Iterable<Artist> entities) {
        return getArtistRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void ArtistServiceImpl.delete(Iterable<Long> ids) {
        List<Artist> toDelete = getArtistRepository().findAll(ids);
        getArtistRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Artist
     */
    @Transactional
    public Artist ArtistServiceImpl.save(Artist entity) {
        return getArtistRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Artist
     */
    public Artist ArtistServiceImpl.findOne(Long id) {
        return getArtistRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Artist
     */
    public Artist ArtistServiceImpl.findOneForUpdate(Long id) {
        return getArtistRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Artist> ArtistServiceImpl.findAll(Iterable<Long> ids) {
        return getArtistRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Artist> ArtistServiceImpl.findAll() {
        return getArtistRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long ArtistServiceImpl.count() {
        return getArtistRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Artist> ArtistServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getArtistRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Artist> ArtistServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getArtistRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Artist> ArtistServiceImpl.getEntityType() {
        return Artist.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> ArtistServiceImpl.getIdType() {
        return Long.class;
    }
    
}
