// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.edu.ufpb.nhrf.musicstreamer.web;

import br.edu.ufpb.nhrf.musicstreamer.domain.Artist;
import br.edu.ufpb.nhrf.musicstreamer.service.api.ArtistService;
import br.edu.ufpb.nhrf.musicstreamer.web.ArtistsItemJsonController;
import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect ArtistsItemJsonController_Roo_JSON {
    
    declare @type: ArtistsItemJsonController: @RestController;
    
    declare @type: ArtistsItemJsonController: @RequestMapping(value = "/api/artists/{artist}", name = "ArtistsItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ArtistService ArtistsItemJsonController.artistService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param artistService
     */
    @Autowired
    public ArtistsItemJsonController.new(ArtistService artistService) {
        this.artistService = artistService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ArtistService
     */
    public ArtistService ArtistsItemJsonController.getArtistService() {
        return artistService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param artistService
     */
    public void ArtistsItemJsonController.setArtistService(ArtistService artistService) {
        this.artistService = artistService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Artist
     */
    @ModelAttribute
    public Artist ArtistsItemJsonController.getArtist(@PathVariable("artist") Long id) {
        Artist artist = artistService.findOne(id);
        if (artist == null) {
            throw new NotFoundException(String.format("Artist with identifier '%s' not found",id));
        }
        return artist;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param artist
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> ArtistsItemJsonController.show(@ModelAttribute Artist artist) {
        return ResponseEntity.ok(artist);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param artist
     * @return UriComponents
     */
    public static UriComponents ArtistsItemJsonController.showURI(Artist artist) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(ArtistsItemJsonController.class).show(artist))
            .buildAndExpand(artist.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedArtist
     * @param artist
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> ArtistsItemJsonController.update(@ModelAttribute Artist storedArtist, @Valid @RequestBody Artist artist, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        artist.setId(storedArtist.getId());
        getArtistService().save(artist);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param artist
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> ArtistsItemJsonController.delete(@ModelAttribute Artist artist) {
        getArtistService().delete(artist);
        return ResponseEntity.ok().build();
    }
    
}
