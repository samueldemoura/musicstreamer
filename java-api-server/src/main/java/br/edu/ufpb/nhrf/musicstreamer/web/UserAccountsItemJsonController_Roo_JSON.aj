// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.edu.ufpb.nhrf.musicstreamer.web;

import br.edu.ufpb.nhrf.musicstreamer.domain.UserAccount;
import br.edu.ufpb.nhrf.musicstreamer.service.api.UserAccountService;
import br.edu.ufpb.nhrf.musicstreamer.web.UserAccountsItemJsonController;
import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect UserAccountsItemJsonController_Roo_JSON {
    
    declare @type: UserAccountsItemJsonController: @RestController;
    
    declare @type: UserAccountsItemJsonController: @RequestMapping(value = "/api/useraccounts/{userAccount}", name = "UserAccountsItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private UserAccountService UserAccountsItemJsonController.userAccountService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param userAccountService
     */
    @Autowired
    public UserAccountsItemJsonController.new(UserAccountService userAccountService) {
        this.userAccountService = userAccountService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return UserAccountService
     */
    public UserAccountService UserAccountsItemJsonController.getUserAccountService() {
        return userAccountService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param userAccountService
     */
    public void UserAccountsItemJsonController.setUserAccountService(UserAccountService userAccountService) {
        this.userAccountService = userAccountService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return UserAccount
     */
    @ModelAttribute
    public UserAccount UserAccountsItemJsonController.getUserAccount(@PathVariable("userAccount") Long id) {
        UserAccount userAccount = userAccountService.findOne(id);
        if (userAccount == null) {
            throw new NotFoundException(String.format("UserAccount with identifier '%s' not found",id));
        }
        return userAccount;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param userAccount
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> UserAccountsItemJsonController.show(@ModelAttribute UserAccount userAccount) {
        return ResponseEntity.ok(userAccount);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param userAccount
     * @return UriComponents
     */
    public static UriComponents UserAccountsItemJsonController.showURI(UserAccount userAccount) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(UserAccountsItemJsonController.class).show(userAccount))
            .buildAndExpand(userAccount.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedUserAccount
     * @param userAccount
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> UserAccountsItemJsonController.update(@ModelAttribute UserAccount storedUserAccount, @Valid @RequestBody UserAccount userAccount, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        userAccount.setId(storedUserAccount.getId());
        getUserAccountService().save(userAccount);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param userAccount
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> UserAccountsItemJsonController.delete(@ModelAttribute UserAccount userAccount) {
        getUserAccountService().delete(userAccount);
        return ResponseEntity.ok().build();
    }
    
}
