// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.edu.ufpb.nhrf.musicstreamer.repository;

import br.edu.ufpb.nhrf.musicstreamer.domain.Album;
import br.edu.ufpb.nhrf.musicstreamer.domain.Artist;
import br.edu.ufpb.nhrf.musicstreamer.domain.QTrack;
import br.edu.ufpb.nhrf.musicstreamer.domain.Track;
import br.edu.ufpb.nhrf.musicstreamer.repository.TrackRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect TrackRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: TrackRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TrackRepositoryImpl.TITLE = "title";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TrackRepositoryImpl.ALBUM = "album";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TrackRepositoryImpl.ARTIST = "artist";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Track> TrackRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QTrack track = QTrack.track;
        
        JPQLQuery<Track> query = from(track);
        
        Path<?>[] paths = new Path<?>[] {track.title,track.album,track.artist};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, track.title)
			.map(ALBUM, track.album)
			.map(ARTIST, track.artist);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, track);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Track> TrackRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QTrack track = QTrack.track;
        
        JPQLQuery<Track> query = from(track);
        
        Path<?>[] paths = new Path<?>[] {track.title,track.album,track.artist};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(track.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, track.title)
			.map(ALBUM, track.album)
			.map(ARTIST, track.artist);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, track);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param album
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Track> TrackRepositoryImpl.findByAlbum(Album album, GlobalSearch globalSearch, Pageable pageable) {
        
        QTrack track = QTrack.track;
        
        JPQLQuery<Track> query = from(track);
        
        Assert.notNull(album, "album is required");
        
        query.where(track.album.eq(album));
        Path<?>[] paths = new Path<?>[] {track.title,track.album,track.artist};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, track.title)
			.map(ALBUM, track.album)
			.map(ARTIST, track.artist);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, track);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param artist
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Track> TrackRepositoryImpl.findByArtist(Artist artist, GlobalSearch globalSearch, Pageable pageable) {
        
        QTrack track = QTrack.track;
        
        JPQLQuery<Track> query = from(track);
        
        Assert.notNull(artist, "artist is required");
        
        query.where(track.artist.eq(artist));
        Path<?>[] paths = new Path<?>[] {track.title,track.album,track.artist};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, track.title)
			.map(ALBUM, track.album)
			.map(ARTIST, track.artist);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, track);
    }
    
}
