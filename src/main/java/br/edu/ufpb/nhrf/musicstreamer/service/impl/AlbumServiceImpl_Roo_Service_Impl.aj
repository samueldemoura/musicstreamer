// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.edu.ufpb.nhrf.musicstreamer.service.impl;

import br.edu.ufpb.nhrf.musicstreamer.domain.Album;
import br.edu.ufpb.nhrf.musicstreamer.domain.Track;
import br.edu.ufpb.nhrf.musicstreamer.repository.AlbumRepository;
import br.edu.ufpb.nhrf.musicstreamer.service.api.TrackService;
import br.edu.ufpb.nhrf.musicstreamer.service.impl.AlbumServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AlbumServiceImpl_Roo_Service_Impl {
    
    declare @type: AlbumServiceImpl: @Service;
    
    declare @type: AlbumServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private AlbumRepository AlbumServiceImpl.albumRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private TrackService AlbumServiceImpl.trackService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param albumRepository
     * @param trackService
     */
    @Autowired
    public AlbumServiceImpl.new(AlbumRepository albumRepository, @Lazy TrackService trackService) {
        setAlbumRepository(albumRepository);
        setTrackService(trackService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return AlbumRepository
     */
    public AlbumRepository AlbumServiceImpl.getAlbumRepository() {
        return albumRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param albumRepository
     */
    public void AlbumServiceImpl.setAlbumRepository(AlbumRepository albumRepository) {
        this.albumRepository = albumRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return TrackService
     */
    public TrackService AlbumServiceImpl.getTrackService() {
        return trackService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param trackService
     */
    public void AlbumServiceImpl.setTrackService(TrackService trackService) {
        this.trackService = trackService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param album
     * @return Map
     */
    public Map<String, List<MessageI18n>> AlbumServiceImpl.validate(Album album) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param album
     * @param tracksToAdd
     * @return Album
     */
    @Transactional
    public Album AlbumServiceImpl.addToTracks(Album album, Iterable<Long> tracksToAdd) {
        List<Track> tracks = getTrackService().findAll(tracksToAdd);
        album.addToTracks(tracks);
        return getAlbumRepository().save(album);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param album
     * @param tracksToRemove
     * @return Album
     */
    @Transactional
    public Album AlbumServiceImpl.removeFromTracks(Album album, Iterable<Long> tracksToRemove) {
        List<Track> tracks = getTrackService().findAll(tracksToRemove);
        album.removeFromTracks(tracks);
        return getAlbumRepository().save(album);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param album
     * @param tracks
     * @return Album
     */
    @Transactional
    public Album AlbumServiceImpl.setTracks(Album album, Iterable<Long> tracks) {
        List<Track> items = getTrackService().findAll(tracks);
        List<Track> currents = album.getTracks();
        Set<Track> toRemove = new HashSet<Track>();
        for (Iterator<Track> iterator = currents.iterator(); iterator.hasNext();) {
            Track nextTrack = iterator.next();
            if (items.contains(nextTrack)) {
                items.remove(nextTrack);
            } else {
                toRemove.add(nextTrack);
            }
        }
        album.removeFromTracks(toRemove);
        album.addToTracks(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        album.setVersion(album.getVersion() + 1);
        return getAlbumRepository().save(album);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param album
     */
    @Transactional
    public void AlbumServiceImpl.delete(Album album) {
        // Clear bidirectional one-to-many parent relationship with Track
        for (Track item : album.getTracks()) {
            item.setAlbum(null);
        }
        
        getAlbumRepository().delete(album);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Album> AlbumServiceImpl.save(Iterable<Album> entities) {
        return getAlbumRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void AlbumServiceImpl.delete(Iterable<Long> ids) {
        List<Album> toDelete = getAlbumRepository().findAll(ids);
        getAlbumRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Album
     */
    @Transactional
    public Album AlbumServiceImpl.save(Album entity) {
        return getAlbumRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Album
     */
    public Album AlbumServiceImpl.findOne(Long id) {
        return getAlbumRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Album
     */
    public Album AlbumServiceImpl.findOneForUpdate(Long id) {
        return getAlbumRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Album> AlbumServiceImpl.findAll(Iterable<Long> ids) {
        return getAlbumRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Album> AlbumServiceImpl.findAll() {
        return getAlbumRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long AlbumServiceImpl.count() {
        return getAlbumRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Album> AlbumServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getAlbumRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Album> AlbumServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getAlbumRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Album> AlbumServiceImpl.getEntityType() {
        return Album.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> AlbumServiceImpl.getIdType() {
        return Long.class;
    }
    
}
